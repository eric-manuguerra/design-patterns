{"name":"Design-patterns","tagline":"Software, enterprise and integration design patterns","body":"Design Patterns\r\n=====\r\n\r\n# Gang of four\r\n\r\nMotifs de conception (design patterns) du \"Gang of Four\" (GoF -  Erich Gamma, Richard Helm, Ralph Johnson et John Vlissides).\r\n\r\nIls s'appliquent à la programmation orientée objet.\r\n\r\n## Command (Commande)\r\n\r\nLe principe de ce motif de conception est d'encapsuler l'invocation. \r\n\r\n**La commande** encapsule l'invocation et référence le destinataire - **receiver** -, et les autres informations nécessaires à l'invocation : la méthode à exécuter et ses paramètres.\r\n\r\nElle est exécutée par **l'invocateur** (invoker).\r\n\r\nLe client référence, l'invocateur, une ou plusieurs commandes et décide laquelle invoquer. \r\n\r\nExemple : un téléspectateur (le client/the client), une télécommande (l'invocateur/the invoker), les boutons de la télécommande (les commandes/the command), la télévision (le destinataire/the receiver).\r\n\r\n![Alt text](/command-pattern/src/main/resources/command-pattern.PNG?raw=true \"Command pattern\")\r\n\r\n## Chain of responsibility (Chaîne de responsabilité)\r\n\r\nLa chaîne de responsabilité permet de découpler l'émetteur et le destinataire d'une requête.\r\n\r\nLa requête est passée à un jeu de destinataires liés en chaîne ayant chacun la possibilité d'effectuer un traitement.\r\n\r\nLes caractéristiques de ce design pattern sont :\r\n\r\n* L'émetteur de la requête et les destinataires sont reliés de manière lâche (\"loosely coupled\")\r\n* 1 ou plusieurs intermédiaires interviennent (la résolution des destinataires est dynamique)\r\n* Les destinataires ne sont pas explicitement définis\r\n\r\nLa spécification Servlet Filter repose sur ce motif de conception.\r\n\r\nLa librairie [Apache commons-chain](http://commons.apache.org/proper/commons-chain/) fournit une implémentation avancée de ce design pattern. \r\n\r\n![Alt text](/cor-pattern/src/main/resources/cor-pattern.PNG?raw=true \"Chain of responsibility pattern\")\r\n\r\n**Utilisation :** Ce pattern s'utilise lorsque qu'un ou plusieurs traitements peuvent être envisagés comme une chaine, chaque maillon de la chaîne étant découplé des autres et optionnel.\r\n\r\n## State (Etat)\r\n\r\nLe motif de conception (ou design pattern) \"State\" est un pattern de comportement.\r\n\r\nIl offre un moyen de changer dynamiquement le comportement d'un système en fonction de son état (\"State\"), en évitant d'avoir recours\r\nà des blocs conditionnels (\"if,  else if, else if ...).\r\n\r\nCe pattern est relativement proche du \"Strategy design pattern\".\r\n\r\n![Alt text](/state-pattern/src/main/resources/state-pattern-uml.PNG?raw=true \"State pattern\")\r\n\r\nIl permet de modéliser par exemple le comportement de la \"machine à états\" (la classe com.sqli.patterns.strategy.Context).\r\n\r\n[State pattern Wikipédia](http://en.wikipedia.org/wiki/State_pattern)\r\n\r\n## Strategy (Stratégie)\r\n\r\nTout comme le pattern \"State\", le pattern \"Strategy\" permet de changer dynamiquement le comportement d'un système.\r\n \r\nPour cela, les comportements sont encapsulés en une famille d'algorithmes qui partagent la même interface. \r\n\r\nLa classe d'implémentation est remplacée dynamiquement en fonction du contexte.\r\n\r\n![Alt text](/strategy-pattern/src/main/resources/strategy-pattern.PNG?raw=true \"Strategy pattern\")\r\n\r\n[Strategy pattern Wikipédia](http://en.wikipedia.org/wiki/Strategy_pattern)\r\n\r\n## Visitor (visiteur)\r\n\r\nCe motif de conception permet de séparer une opération des éléments d'une structure de données auxquels elle s'applique.\r\n\r\nIl permet de faire évoluer indépendamment les éléments de la structure de données et les traitements qui leur sont appliqués.\r\n\r\nCe motif se révèle utile lorsqu'il n'est *pas souhaitable* ou *pas possible* de modifier la structure de données à parcourir.\r\n\r\n![Alt text](/visitor-pattern/src/main/resources/visitor-pattern.PNG?raw=true \"Visitor pattern\")\r\n\r\n[Visitor pattern Wikipédia](http://en.wikipedia.org/wiki/Visitor_pattern)\r\n\r\n ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}